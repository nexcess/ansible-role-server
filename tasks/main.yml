---

- include: epel-override.yml
  when: server_epel_override

- name: Set the Hostname
  hostname:
    name="{{ inventory_hostname }}"
  failed_when: false
  tags:
    - environment
    - hostname

- name: Set SELinux Enforcing
  selinux:
    policy="targeted"
    state="enforcing"
  when: server_selinux_enforcing
  tags:
    - environment
    - security
    - selinux
    - selinux-enforcing

- name: Disable SELinux
  selinux:
    state="disabled"
  when: not server_selinux_enforcing
  tags:
    - environment
    - security
    - selinux
    - selinux-enforcing

- name: 'Ensure mount point options'
  lineinfile:
    path: /etc/fstab
    regexp: '^([^ ]+[ ]+\{{ item.point }}[ ]+[^ ]+[ ]+)([^ ]+)(.*)'
    line: '\1{{ item.opts }}\3'
    backrefs: yes
  when: server_mount_opts
  with_items: "{{ server_mount_opts }}"
  register: fstab
  tags:
    - environment
    - mounts

- name: 'If mount point options changed, remount'
  command: mount -o remount {{ item.point }}
  when: (fstab.changed and server_mount_opts and server_mount_opts_remount)
  with_items: "{{ server_mount_opts }}"
  tags:
    - environment
    - mounts

- name: Configure /proc with hidepid in /etc/fstab
  mount:
    name: '/proc'
    src: 'proc'
    fstype: 'proc'
    opts: 'defaults,nosuid,nodev,noexec,relatime,hidepid={{ server_proc_hidepid_level }},gid={{ server_proc_hidepid_group }}'
    state: 'mounted'
  when: (server_proc_hidepid and server_proc_hidepid_level and server_proc_hidepid_group)
  tags:
    - environment
    - mounts

- name: Turn Off Unused Services
  service:
    name="{{ item }}"
    enabled="no"
    state="stopped"
  with_items: "{{ server_services_unused }}"
  ignore_errors: yes
  tags:
    - security
    - services
    - unused-services

- include: limits.yml
  when: server_adjust_limits
  tags:
    - environment
    - resources
    - pam
    - pam-limits

- include: sysctl.yml
  when: server_set_sysctl_base
  tags:
    - environment
    - resources
    - kernel
    - kernel-sysctl

- include: udev.yml
  when: server_set_udev_rules
  tags:
    - environment
    - resources
    - kernel
    - kernel-udev

- include: hosts.yml
  when: hosts_file_included
  tags:
    - environment
    - hosts

- name: Make Sure Known Hosts File Exists
  file:
    path="{{ server_ssh_known_hosts_file }}"
    state="touch"
  tags:
    - environment
    - ssh
    - ssh-known-hosts

- name: Suck in Known Hosts
  shell: "ssh-keygen -f {{ server_ssh_known_hosts_file }} -F {{ item }}"
  with_items: "{{ server_ssh_known_hosts }}"
  register: server_ssh_known_host_results
  # ignoring errors here since `Scan the Public Key' below will add any
  # missing public key into {{ server_ssh_known_hosts_file }}
  failed_when: false
  tags:
    - environment
    - ssh
    - ssh-known-hosts

- name: Scan the Public Key
  shell: "{{ server_ssh_known_hosts_command }} {{ item.item }} >> {{ server_ssh_known_hosts_file }}"
  with_items: "{{ server_ssh_known_host_results.results }}"
  when: item.stdout == ""
  tags:
    - environment
    - ssh
    - ssh-public-keys

- name: Setup Bash Aliases
  lineinfile:
    dest="/etc/profile.d/aliases.sh"
    create="yes"
    owner="root"
    group="root"
    mode="0644"
    line='alias {{ item.key }}="{{ item.value }}"'
    regexp="^alias {{ item.key }}="
  with_dict: "{{ server_bash_aliases }}"
  tags:
    - environment
    - bash
    - bash-aliases

- name: Setup Bash History
  template:
    src="etc/profile.d/shell_history.j2"
    dest="/etc/profile.d/shell_history.sh"
    owner="root"
    group="root"
    mode="0644"
  when: server_bash_history
  tags:
    - environment
    - bash
    - bash-history

- name: Make Sure firewalld is OFF
  service:
    name="firewalld"
    enabled="no"
    state="stopped"
  when: firewall_included
  register: firewalld
  failed_when: false
  tags:
    - environment
    - bash
    - bash-history

- name: Reload Firewalling Since Firewalld Wiped Rules
  command: /bin/true
  notify: restart firewall
  when:
    - firewall_included
    - firewalld.changed
  tags:
    - network
    - security
    - firewall

- name: Update Base System
  yum:
    name=*
    update_cache=yes
    state=latest
    skip_broken=yes
  when: server_update
  tags:
    - environment
    - security
    - updates
    - yum-updates
