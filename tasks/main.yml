---

- include: epel-override.yml
  when: server_epel_override

- include: nexcess-repo.yml
  when: server_nexcessrepo_install

- name: Set the Hostname
  hostname:
    name="{{ inventory_hostname }}"
  failed_when: false
  tags:
    - environment
    - hostname

- name: Set the Global PATH
  lineinfile:
    dest="/etc/environment"
    state="present"
    line="PATH={{ server_extra_path }}:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin"
  when: server_extra_path != ''
  tags:
    - environment
    - paths

- name: Install Extras
  yum:
    name="{{ item }}"
    state="present"
    disablerepo="*"
    enablerepo="epel,remi,base,updates,extras"
    skip_broken=yes
    update_cache=yes
  with_items: "{{ server_packages + server_extra_packages }}"
  tags:
    - packages
    - extras

- name: Install Nexcess packages
  yum:
    name="{{ item }}"
    state="present"
    enablerepo="nexcess,epel,base,updates,extras"
    skip_broken="yes"
    update_cache="yes"
  with_items: "{{ server_nexcessrepo_packages }}"
  when: server_nexcessrepo_install
  tags:
    - packages
    - nexcess-repo

- name: Install shyaml
  pip:
    name="shyaml"
  tags:
    - packages
    - extras

- name: Set SELinux Enforcing
  selinux:
    policy="targeted"
    state="enforcing"
  when: server_selinux_enforcing
  tags:
    - environment
    - security
    - selinux
    - selinux-enforcing

- name: Disable SELinux
  selinux:
    state="disabled"
  when: not server_selinux_enforcing
  tags:
    - environment
    - security
    - selinux
    - selinux-enforcing

# gnarly regex looks for rootfs (of any fs type) that doesn't already
#  have noatime appended, special regex stuff is:
#   \s is any whitespace char
#   \S is any non-whitespace char
#   \w is any alphanumeric + _ (underscore)
#   (?!thing) is a negative lookahead assertion
#  this assumes that "defaults" is always the first mount option for rootfs
- name: Set noatime on filesystems
  lineinfile:
    dest="/etc/fstab"
    regexp="^([^#].*\s+/\s+\w+\s+)(defaults(?!\S+noatime)\S+)(\s+.*)$"
    line="\1\2,noatime\3"
    backrefs="yes"
  tags:
    - environment
    - mounts

- name: Turn Off Unused Services
  service:
    name="{{ item }}"
    enabled="no"
    state="stopped"
  with_items: "{{ server_services_unused }}"
  ignore_errors: yes
  tags:
    - security
    - services
    - unused-services

- include: limits.yml
  when: server_adjust_limits
  tags:
    - environment
    - resources
    - pam
    - pam-limits

- include: sysctl.yml
  when: server_set_sysctl_base
  tags:
    - environment
    - resources
    - kernel
    - kernel-sysctl

- include: udev.yml
  when: server_set_udev_rules
  tags:
    - environment
    - resources
    - kernel
    - kernel-udev

- name: Setup /etc/hosts
  template:
    src="etc/hosts.j2"
    dest="/etc/hosts"
    owner="root"
    group="root"
    mode="0644"
  tags:
    - environment
    - hosts

- name: Make Sure Known Hosts File Exists
  file:
    path="{{ server_ssh_known_hosts_file }}"
    state="touch"
  tags:
    - environment
    - ssh
    - ssh-known-hosts

- name: Suck in Known Hosts
  shell: "ssh-keygen -f {{ server_ssh_known_hosts_file }} -F {{ item }}"
  with_items: "{{ server_ssh_known_hosts }}"
  register: server_ssh_known_host_results
  # ignoring errors here since `Scan the Public Key' below will add any
  # missing public key into {{ server_ssh_known_hosts_file }}
  failed_when: false
  tags:
    - environment
    - ssh
    - ssh-known-hosts

- name: Scan the Public Key
  shell: "{{ server_ssh_known_hosts_command }} {{ item.item }} >> {{ server_ssh_known_hosts_file }}"
  with_items: "{{ server_ssh_known_host_results.results }}"
  when: item.stdout == ""
  tags:
    - environment
    - ssh
    - ssh-public-keys

- name: Setup Bash Aliases
  lineinfile:
    dest="/etc/profile.d/aliases.sh"
    create="yes"
    owner="root"
    group="root"
    mode="0644"
    line='alias {{ item.key }}="{{ item.value }}"'
    regexp="^alias {{ item.key }}="
  with_dict: "{{ server_bash_aliases }}"
  tags:
    - environment
    - bash
    - bash-aliases

- name: Setup Bash History
  template:
    src="etc/profile.d/shell_history.j2"
    dest="/etc/profile.d/shell_history.sh"
    owner="root"
    group="root"
    mode="0644"
  when: server_bash_history
  tags:
    - environment
    - bash
    - bash-history

- name: Make Sure firewalld is OFF
  service:
    name="firewalld"
    enabled="no"
    state="stopped"
  when: firewall_included
  register: firewalld
  failed_when: false
  tags:
    - environment
    - bash
    - bash-history

- name: Reload Firewalling Since Firewalld Wiped Rules
  command: /bin/true
  notify: restart firewall
  when:
    - firewall_included
    - firewalld.changed
  tags:
    - network
    - security
    - firewall

- name: Update Base System
  yum:
    name=*
    update_cache=yes
    state=latest
    skip_broken=yes
  when: server_update
  tags:
    - environment
    - security
    - updates
    - yum-updates
